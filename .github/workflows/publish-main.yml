name: TacoBot Publish
on:
  push:
    branches:
      - develop
jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      app_version: "${{ steps.semvers.outputs.patch }}" # set the app_version to be the PATCH updated version
      tag: "${{ steps.semvers.outputs.v_patch }}" # set the tag to be the PATCH updated version.
    env:
      GITHUB_TOKEN: "${{ github.token }}"
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    # Get the current tag
    - name: 'Get Previous tag'
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
      with:
        fallback: 1.0.0 # Optional fallback tag to use when no tag can be found
    # calculate the next version
    - name: 'Get next minor version'
      id: semvers
      uses: "WyriHaximus/github-action-next-semvers@v1"
      with:
        version: "${{ steps.previoustag.outputs.tag }}"
    - run: echo "app_version ${{ steps.semvers.outputs.patch }}"
  docker:
    runs-on: ubuntu-latest
    needs: version
    # env:
    #   DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
    steps:
    - name: lowercase repo name
      run: |
        echo "REPOSITORY_NAME=$(echo "${{ github.repository }}" | awk '{print tolower($0)}')" >> "$GITHUB_ENV"

    - name: Prepare
      id: prep
      run: |
        GHCR_IMAGE="ghcr.io/${{ env.REPOSITORY_NAME }}";

        TAGSZ="${GHCR_IMAGE}:latest,${GHCR_IMAGE}:${{ needs.version.outputs.app_version }}";
        BUILD_DATEZ="$(date +'%Y-%m-%dT%TZ%z' -u)";
        PROJECT_NAMEZ=`echo "${{ env.REPOSITORY_NAME }}" | awk '{split($0,a,"/"); print a[2]}'`;
        echo "BUILD_TAGS=${TAGSZ}" >> "$GITHUB_ENV";
        echo "BUILD_DATE=${BUILD_DATEZ}" >> "$GITHUB_ENV";
        echo "PROJECT_NAME=${PROJECT_NAMEZ}" >> "$GITHUB_ENV";

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Build and Push GHCR
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        push: true
        build-args: |
          PROJECT_NAME="${{ env.PROJECT_NAME }}"
          BUILD_VERSION="${{ needs.version.outputs.app_version }}"
        tags: "${{ env.BUILD_TAGS }}"
  merge:
    runs-on: ubuntu-latest
    needs:
    - docker
    - version
    steps:

    - uses: actions/checkout@v3
    - name: Merge develop -> main
      uses: devmasx/merge-branch@1.4.0
      with:
        type: now
        from_branch: develop
        target_branch: main
        github_token: "${{ github.token }}"
    # https://github.com/rickstaa/action-create-tag
    - uses: rickstaa/action-create-tag@v1
      with:
        tag: "${{ needs.version.outputs.tag }}"
        tag_exists_error: false
        message: ''
  dispatch_documentation:
    runs-on: ubuntu-latest
    needs:
    - merge
    steps:
    - name: dispatch build event
      run: |
        curl -X POST https://api.github.com/repos/tacocontent/ourtacobot/dispatches \
          -H 'Accept: application/vnd.github.v3+json' \
          -u "${{ secrets.ACTION_DISPATCH_TOKEN }}" \
          --data '{"event_type": "build_documentation", "client_payload": {} }'
